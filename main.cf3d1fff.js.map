{"version":3,"sources":["scripts/main.js"],"names":["body","document","promiseStateValues","Success","Warning","createDiv","state","text","div","createElement","dataset","qa","textContent","classList","add","getPromiseResultString","promiseNumber","promiseResultStr","successHandler","elem","append","errorHandler","firstPromise","Promise","resolve","reject","addEventListener","setTimeout","secondPromise","secondPromiseResolver","thirdPromise","buttonsClicked","left","right","thirdPromiseResolver","then","result","catch"],"mappings":";AAAA,aAEA,IAAMA,EAAOC,SAASD,KAChBE,EAAqB,CACzBC,QAAS,UACTC,QAAS,WAGLC,EAAY,SAACC,EAAOC,GAClBC,IAAAA,EAAMP,SAASQ,cAAc,OAK3BH,OAHRE,EAAIE,QAAQC,GAAK,eACjBH,EAAII,YAAcL,EAEVD,GACDJ,KAAAA,EAAmBC,QACtBK,EAAIK,UAAUC,IAAIZ,EAAmBC,SACrC,MAEGD,KAAAA,EAAmBE,QACtBI,EAAIK,UAAUC,IAAIZ,EAAmBE,SAIlCI,OAAAA,GAGT,SAASO,EAAuBT,EAAOU,GACjCC,IAAAA,EAEID,OAAAA,GACD,KAAA,EACHC,EAAmB,QACnB,MAEG,KAAA,EACHA,EAAmB,SACnB,MAEG,KAAA,EACHA,EAAmB,QAIfX,OAAAA,GACDJ,KAAAA,EAAmBC,QACtBc,GAAoB,yBACpB,MAEGf,KAAAA,EAAmBE,QACtBa,GAAoB,yBAIjBA,OAAAA,EAGT,IAAMC,EAAiB,SAACC,EAAMZ,GAC5BY,EAAKC,OAAOf,EAAUH,EAAmBC,QAASI,KAG9Cc,EAAe,SAACF,EAAMZ,GAC1BY,EAAKC,OAAOf,EAAUH,EAAmBE,QAASG,KAG9Ce,EAAe,IAAIC,QAAQ,SAACC,EAASC,GACzCxB,SAASyB,iBAAiB,QAAS,WACjCF,EAAQT,EAAuBb,EAAmBC,QAAS,MAG7DwB,WAAW,WAAMF,OAAAA,EACfV,EAAuBb,EAAmBE,QAAS,KAClD,OAGCwB,EAAgB,IAAIL,QAAQ,SAACC,EAASC,GACpCI,IAAAA,EAAwB,WAC5BL,EAAQT,EAAuBb,EAAmBC,QAAS,KAG7DF,SAASyB,iBAAiB,QAAS,WACjCG,MAGF5B,SAASyB,iBAAiB,cAAe,WACvCG,QAIEC,EAAe,IAAIP,QAAQ,SAACC,EAASC,GACnCM,IAAAA,EAAiB,CACrBC,MAAM,EACNC,OAAO,GAGHC,EAAuB,WACvBH,EAAeC,MAAQD,EAAeE,OACxCT,EAAQT,EAAuBb,EAAmBC,QAAS,KAI/DF,SAASyB,iBAAiB,QAAS,WACjCK,EAAeC,MAAO,EACtBE,MAGFjC,SAASyB,iBAAiB,cAAe,WACvCK,EAAeE,OAAQ,EACvBC,QAIJZ,EACGa,KAAK,SAAAC,GAAUlB,OAAAA,EAAelB,EAAMoC,KACpCC,MAAM,SAAAD,GAAUf,OAAAA,EAAarB,EAAMoC,KAEtCR,EAAcO,KAAK,SAAAC,GAAUlB,OAAAA,EAAelB,EAAMoC,KAClDN,EAAaK,KAAK,SAAAC,GAAUlB,OAAAA,EAAelB,EAAMoC","file":"main.cf3d1fff.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst body = document.body;\nconst promiseStateValues = {\n  Success: 'success',\n  Warning: 'warning',\n};\n\nconst createDiv = (state, text) => {\n  const div = document.createElement('div');\n\n  div.dataset.qa = 'notification';\n  div.textContent = text;\n\n  switch (state) {\n    case promiseStateValues.Success:\n      div.classList.add(promiseStateValues.Success);\n      break;\n\n    case promiseStateValues.Warning:\n      div.classList.add(promiseStateValues.Warning);\n      break;\n  }\n\n  return div;\n};\n\nfunction getPromiseResultString(state, promiseNumber) {\n  let promiseResultStr;\n\n  switch (promiseNumber) {\n    case 1:\n      promiseResultStr = 'First';\n      break;\n\n    case 2:\n      promiseResultStr = 'Second';\n      break;\n\n    case 3:\n      promiseResultStr = 'Third';\n      break;\n  }\n\n  switch (state) {\n    case promiseStateValues.Success:\n      promiseResultStr += ' promise was resolved!';\n      break;\n\n    case promiseStateValues.Warning:\n      promiseResultStr += ' promise was rejected!';\n      break;\n  }\n\n  return promiseResultStr;\n}\n\nconst successHandler = (elem, text) => {\n  elem.append(createDiv(promiseStateValues.Success, text));\n};\n\nconst errorHandler = (elem, text) => {\n  elem.append(createDiv(promiseStateValues.Warning, text));\n};\n\nconst firstPromise = new Promise((resolve, reject) => {\n  document.addEventListener('click', () => {\n    resolve(getPromiseResultString(promiseStateValues.Success, 1));\n  });\n\n  setTimeout(() => reject(\n    getPromiseResultString(promiseStateValues.Warning, 1)\n  ), 3000);\n});\n\nconst secondPromise = new Promise((resolve, reject) => {\n  const secondPromiseResolver = () => {\n    resolve(getPromiseResultString(promiseStateValues.Success, 2));\n  };\n\n  document.addEventListener('click', () => {\n    secondPromiseResolver();\n  });\n\n  document.addEventListener('contextmenu', () => {\n    secondPromiseResolver();\n  });\n});\n\nconst thirdPromise = new Promise((resolve, reject) => {\n  const buttonsClicked = {\n    left: false,\n    right: false,\n  };\n\n  const thirdPromiseResolver = () => {\n    if (buttonsClicked.left && buttonsClicked.right) {\n      resolve(getPromiseResultString(promiseStateValues.Success, 3));\n    }\n  };\n\n  document.addEventListener('click', () => {\n    buttonsClicked.left = true;\n    thirdPromiseResolver();\n  });\n\n  document.addEventListener('contextmenu', () => {\n    buttonsClicked.right = true;\n    thirdPromiseResolver();\n  });\n});\n\nfirstPromise\n  .then(result => successHandler(body, result))\n  .catch(result => errorHandler(body, result));\n\nsecondPromise.then(result => successHandler(body, result));\nthirdPromise.then(result => successHandler(body, result));\n"]}